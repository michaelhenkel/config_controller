// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controller.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	v1alpha1 "ssd-git.juniper.net/contrail/cn2/contrail/pkg/apis/core/v1alpha1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubscriptionRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionRequest) Reset()         { *m = SubscriptionRequest{} }
func (m *SubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*SubscriptionRequest) ProtoMessage()    {}
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}
func (m *SubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionRequest.Unmarshal(m, b)
}
func (m *SubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionRequest.Marshal(b, m, deterministic)
}
func (m *SubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionRequest.Merge(m, src)
}
func (m *SubscriptionRequest) XXX_Size() int {
	return xxx_messageInfo_SubscriptionRequest.Size(m)
}
func (m *SubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionRequest proto.InternalMessageInfo

func (m *SubscriptionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Resource struct {
	// Types that are valid to be assigned to Resource:
	//	*Resource_VirtualNetwork
	Resource             isResource_Resource `protobuf_oneof:"resource"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{1}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

type isResource_Resource interface {
	isResource_Resource()
}

type Resource_VirtualNetwork struct {
	VirtualNetwork *v1alpha1.VirtualNetwork `protobuf:"bytes,1,opt,name=virtualNetwork,proto3,oneof" json:"virtualNetwork,omitempty"`
}

func (*Resource_VirtualNetwork) isResource_Resource() {}

func (m *Resource) GetResource() isResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Resource) GetVirtualNetwork() *v1alpha1.VirtualNetwork {
	if x, ok := m.GetResource().(*Resource_VirtualNetwork); ok {
		return x.VirtualNetwork
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Resource) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Resource_VirtualNetwork)(nil),
	}
}

func init() {
	proto.RegisterType((*SubscriptionRequest)(nil), "github.com.michaelhenkel.config_controller.pkg.apis.v1.SubscriptionRequest")
	proto.RegisterType((*Resource)(nil), "github.com.michaelhenkel.config_controller.pkg.apis.v1.Resource")
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor_ed7f10298fa1d90f) }

var fileDescriptor_ed7f10298fa1d90f = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xcf, 0x4a, 0x33, 0x31,
	0x14, 0xc5, 0xbf, 0xf9, 0x10, 0xa9, 0x11, 0xa4, 0xa4, 0x1b, 0xe9, 0x4a, 0xba, 0xd2, 0x85, 0x37,
	0x9d, 0x11, 0xc4, 0xa5, 0xb4, 0x1b, 0x41, 0x91, 0x32, 0x82, 0x82, 0x9b, 0x92, 0x49, 0xaf, 0x33,
	0x71, 0xd2, 0x64, 0x4c, 0x32, 0x23, 0xf8, 0x18, 0xbe, 0x83, 0xaf, 0xe0, 0x8b, 0xf9, 0x02, 0xd2,
	0xb1, 0xff, 0x75, 0x55, 0x74, 0x97, 0x0b, 0xf7, 0x9e, 0xfb, 0xbb, 0x27, 0x87, 0x34, 0x85, 0xd1,
	0xde, 0x1a, 0xa5, 0xd0, 0x42, 0x61, 0x8d, 0x37, 0xf4, 0x34, 0x95, 0x3e, 0x2b, 0x13, 0x10, 0x66,
	0x0c, 0x63, 0x29, 0x32, 0x8e, 0x2a, 0x43, 0x9d, 0xa3, 0x02, 0x61, 0xf4, 0x83, 0x4c, 0x87, 0xcb,
	0x13, 0x79, 0x0a, 0xbc, 0x90, 0x0e, 0xaa, 0xb0, 0x3d, 0x70, 0x6e, 0x74, 0x9c, 0x4a, 0x0f, 0x8f,
	0xa5, 0x96, 0x05, 0x5a, 0xd0, 0xe8, 0x59, 0xdd, 0xcb, 0xa5, 0x62, 0x42, 0x47, 0x8b, 0xa2, 0xc8,
	0x53, 0x36, 0x19, 0x63, 0xc2, 0x58, 0x64, 0x55, 0xc8, 0x55, 0x91, 0xf1, 0x90, 0xa5, 0xa8, 0xd1,
	0x72, 0x8f, 0xa3, 0x2f, 0x92, 0xce, 0x11, 0x69, 0xdd, 0x94, 0x89, 0x13, 0x56, 0x16, 0x5e, 0x1a,
	0x1d, 0xe3, 0x53, 0x89, 0xce, 0x53, 0x4a, 0xb6, 0x34, 0x1f, 0xe3, 0x7e, 0x70, 0x10, 0x1c, 0xee,
	0xc4, 0xf5, 0xbb, 0xf3, 0x1a, 0x90, 0x46, 0x8c, 0xce, 0x94, 0x56, 0x20, 0x7d, 0x21, 0x7b, 0x95,
	0xb4, 0xbe, 0xe4, 0xea, 0x1a, 0xfd, 0xb3, 0xb1, 0x79, 0xdd, 0xba, 0x1b, 0x0d, 0xc0, 0xb9, 0xd1,
	0x70, 0x0d, 0x11, 0x66, 0x54, 0x20, 0x74, 0xb4, 0x28, 0xe6, 0x97, 0x4d, 0x10, 0x61, 0x86, 0x08,
	0xb7, 0x2b, 0xba, 0x17, 0xff, 0xe2, 0xb5, 0x4d, 0x3d, 0x42, 0x1a, 0x76, 0xca, 0x11, 0x7d, 0xfc,
	0x27, 0xcd, 0x7e, 0xed, 0x59, 0x7f, 0x6e, 0x19, 0x7d, 0x0f, 0x48, 0x6b, 0x55, 0xe5, 0x8e, 0x7b,
	0x91, 0xd1, 0x4b, 0xd8, 0xcc, 0x77, 0xf8, 0xc1, 0xa2, 0xf6, 0xaf, 0x5f, 0xda, 0x0d, 0xe8, 0x5b,
	0x40, 0xe8, 0x74, 0x57, 0x82, 0x57, 0xd2, 0xf9, 0x3f, 0xe0, 0x3e, 0xdf, 0x54, 0x6c, 0xf6, 0xf7,
	0xdd, 0xa0, 0x77, 0x76, 0xbf, 0x94, 0x60, 0xb6, 0x22, 0xc2, 0xbe, 0x89, 0x2c, 0xa2, 0x58, 0x85,
	0xc9, 0x76, 0x1d, 0xbb, 0x93, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0x74, 0x9d, 0x0d, 0x14,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigControllerClient is the client API for ConfigController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigControllerClient interface {
	VirtualNetworkWatch(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (ConfigController_VirtualNetworkWatchClient, error)
	SubscribeListWatch(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (ConfigController_SubscribeListWatchClient, error)
}

type configControllerClient struct {
	cc *grpc.ClientConn
}

func NewConfigControllerClient(cc *grpc.ClientConn) ConfigControllerClient {
	return &configControllerClient{cc}
}

func (c *configControllerClient) VirtualNetworkWatch(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (ConfigController_VirtualNetworkWatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigController_serviceDesc.Streams[0], "/github.com.michaelhenkel.config_controller.pkg.apis.v1.ConfigController/VirtualNetworkWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &configControllerVirtualNetworkWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigController_VirtualNetworkWatchClient interface {
	Recv() (*v1alpha1.VirtualNetwork, error)
	grpc.ClientStream
}

type configControllerVirtualNetworkWatchClient struct {
	grpc.ClientStream
}

func (x *configControllerVirtualNetworkWatchClient) Recv() (*v1alpha1.VirtualNetwork, error) {
	m := new(v1alpha1.VirtualNetwork)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configControllerClient) SubscribeListWatch(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (ConfigController_SubscribeListWatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigController_serviceDesc.Streams[1], "/github.com.michaelhenkel.config_controller.pkg.apis.v1.ConfigController/SubscribeListWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &configControllerSubscribeListWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigController_SubscribeListWatchClient interface {
	Recv() (*Resource, error)
	grpc.ClientStream
}

type configControllerSubscribeListWatchClient struct {
	grpc.ClientStream
}

func (x *configControllerSubscribeListWatchClient) Recv() (*Resource, error) {
	m := new(Resource)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigControllerServer is the server API for ConfigController service.
type ConfigControllerServer interface {
	VirtualNetworkWatch(*SubscriptionRequest, ConfigController_VirtualNetworkWatchServer) error
	SubscribeListWatch(*SubscriptionRequest, ConfigController_SubscribeListWatchServer) error
}

// UnimplementedConfigControllerServer can be embedded to have forward compatible implementations.
type UnimplementedConfigControllerServer struct {
}

func (*UnimplementedConfigControllerServer) VirtualNetworkWatch(req *SubscriptionRequest, srv ConfigController_VirtualNetworkWatchServer) error {
	return status.Errorf(codes.Unimplemented, "method VirtualNetworkWatch not implemented")
}
func (*UnimplementedConfigControllerServer) SubscribeListWatch(req *SubscriptionRequest, srv ConfigController_SubscribeListWatchServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeListWatch not implemented")
}

func RegisterConfigControllerServer(s *grpc.Server, srv ConfigControllerServer) {
	s.RegisterService(&_ConfigController_serviceDesc, srv)
}

func _ConfigController_VirtualNetworkWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigControllerServer).VirtualNetworkWatch(m, &configControllerVirtualNetworkWatchServer{stream})
}

type ConfigController_VirtualNetworkWatchServer interface {
	Send(*v1alpha1.VirtualNetwork) error
	grpc.ServerStream
}

type configControllerVirtualNetworkWatchServer struct {
	grpc.ServerStream
}

func (x *configControllerVirtualNetworkWatchServer) Send(m *v1alpha1.VirtualNetwork) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigController_SubscribeListWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigControllerServer).SubscribeListWatch(m, &configControllerSubscribeListWatchServer{stream})
}

type ConfigController_SubscribeListWatchServer interface {
	Send(*Resource) error
	grpc.ServerStream
}

type configControllerSubscribeListWatchServer struct {
	grpc.ServerStream
}

func (x *configControllerSubscribeListWatchServer) Send(m *Resource) error {
	return x.ServerStream.SendMsg(m)
}

var _ConfigController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.michaelhenkel.config_controller.pkg.apis.v1.ConfigController",
	HandlerType: (*ConfigControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VirtualNetworkWatch",
			Handler:       _ConfigController_VirtualNetworkWatch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeListWatch",
			Handler:       _ConfigController_SubscribeListWatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}
